/* Generated By:JavaCC: Do not edit this line. JavaParserTokenManager.java */
package org.netbeans.aspectj.jcclexer;
import java.io.*;

/** Token Manager. */
public class JavaParserTokenManager implements JavaParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8L) != 0L || (active2 & 0x80400000L) != 0L)
            return 48;
         if ((active2 & 0x8000000008L) != 0L)
            return 5;
         if ((active0 & 0xffffffffffffff00L) != 0L || (active1 & 0xfff87fffffL) != 0L)
         {
            jjmatchedKind = 120;
            return 29;
         }
         return -1;
      case 1:
         if ((active0 & 0x8L) != 0L)
            return 46;
         if ((active0 & 0xffffffff7fcfff00L) != 0L || (active1 & 0xfff87fffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0x80300000L) != 0L)
            return 29;
         return -1;
      case 2:
         if ((active0 & 0xfdffff675fefff00L) != 0L || (active1 & 0xff387fffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 2;
            }
            return 29;
         }
         if ((active0 & 0x200009820000000L) != 0L || (active1 & 0xc0000000L) != 0L)
            return 29;
         return -1;
      case 3:
         if ((active0 & 0x510012040c0b000L) != 0L || (active1 & 0x800021c020L) != 0L)
            return 29;
         if ((active0 & 0xf8effe571f2f4f00L) != 0L || (active1 & 0x7f385e3fdfL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 3;
            }
            return 29;
         }
         return -1;
      case 4:
         if ((active0 & 0xa88dbe57012c0700L) != 0L || (active1 & 0x4f384fefdfL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 4;
            }
            return 29;
         }
         if ((active0 & 0x506240001e034800L) != 0L || (active1 & 0x3000101000L) != 0L)
            return 29;
         return -1;
      case 5:
         if ((active0 & 0x8890e15090c0500L) != 0L || (active1 & 0x23184fffd6L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 5;
            }
            return 29;
         }
         if ((active0 & 0xa044b04200200200L) != 0L || (active1 & 0x4c20000009L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x889081500040100L) != 0L || (active1 & 0x2a3841df5eL) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 6;
            return 29;
         }
         if ((active0 & 0x60009080400L) != 0L || (active1 & 0x1000e2080L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active0 & 0x88081500000000L) != 0L || (active1 & 0x2a3841cc5cL) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 7;
            }
            return 29;
         }
         if ((active0 & 0x801000000040100L) != 0L || (active1 & 0x1302L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active0 & 0x8000500000000L) != 0L || (active1 & 0x2a3841ce10L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 8;
            return 29;
         }
         if ((active0 & 0x80081000000000L) != 0L || (active1 & 0x4cL) != 0L)
            return 29;
         return -1;
      case 9:
         if ((active0 & 0x8000000000000L) != 0L || (active1 & 0x23801ce00L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 9;
            return 29;
         }
         if ((active0 & 0x500000000L) != 0L || (active1 & 0x2800400010L) != 0L)
            return 29;
         return -1;
      case 10:
         if ((active1 & 0x800L) != 0L)
            return 29;
         if ((active0 & 0x8000000000000L) != 0L || (active1 & 0x23801c600L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 10;
            return 29;
         }
         return -1;
      case 11:
         if ((active1 & 0x23801c600L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 11;
            return 29;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 29;
         return -1;
      case 12:
         if ((active1 & 0x238010000L) != 0L)
         {
            if (jjmatchedPos != 12)
            {
               jjmatchedKind = 120;
               jjmatchedPos = 12;
            }
            return 29;
         }
         if ((active1 & 0xc600L) != 0L)
            return 29;
         return -1;
      case 13:
         if ((active1 & 0x8000000L) != 0L)
            return 29;
         if ((active1 & 0x230018000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 13;
            return 29;
         }
         return -1;
      case 14:
         if ((active1 & 0x30018000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 14;
            return 29;
         }
         if ((active1 & 0x200000000L) != 0L)
            return 29;
         return -1;
      case 15:
         if ((active1 & 0x30018000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 15;
            return 29;
         }
         return -1;
      case 16:
         if ((active1 & 0x20018000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 16;
            return 29;
         }
         if ((active1 & 0x10000000L) != 0L)
            return 29;
         return -1;
      case 17:
         if ((active1 & 0x20018000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 17;
            return 29;
         }
         return -1;
      case 18:
         if ((active1 & 0x20018000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 18;
            return 29;
         }
         return -1;
      case 19:
         if ((active1 & 0x18000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 19;
            return 29;
         }
         if ((active1 & 0x20000000L) != 0L)
            return 29;
         return -1;
      case 20:
         if ((active1 & 0x18000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 20;
            return 29;
         }
         return -1;
      case 21:
         if ((active1 & 0x18000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 21;
            return 29;
         }
         return -1;
      case 22:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 22;
            return 29;
         }
         if ((active1 & 0x8000L) != 0L)
            return 29;
         return -1;
      case 23:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 23;
            return 29;
         }
         return -1;
      case 24:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 24;
            return 29;
         }
         return -1;
      case 25:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 25;
            return 29;
         }
         return -1;
      case 26:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 26;
            return 29;
         }
         return -1;
      case 27:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 27;
            return 29;
         }
         return -1;
      case 28:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 28;
            return 29;
         }
         return -1;
      case 29:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 29;
            return 29;
         }
         return -1;
      case 30:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 30;
            return 29;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 37:
         jjmatchedKind = 154;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000L);
      case 38:
         jjmatchedKind = 151;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100010000L);
      case 40:
         return jjStopAtPos(0, 123);
      case 41:
         return jjStopAtPos(0, 124);
      case 42:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      case 43:
         jjmatchedKind = 147;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10020000L);
      case 44:
         return jjStopAtPos(0, 130);
      case 45:
         jjmatchedKind = 148;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20040000L);
      case 46:
         jjmatchedKind = 131;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L);
      case 47:
         jjmatchedKind = 150;
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L, 0x80000000L);
      case 58:
         return jjStopAtPos(0, 138);
      case 59:
         return jjStopAtPos(0, 129);
      case 60:
         jjmatchedKind = 134;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1008001000L);
      case 61:
         jjmatchedKind = 133;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x6000002000L);
      case 63:
         return jjStopAtPos(0, 137);
      case 64:
         jjmatchedKind = 132;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1f0007800000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 127);
      case 93:
         return jjStopAtPos(0, 128);
      case 94:
         jjmatchedKind = 153;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xe000000000000300L, 0x8200000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x1L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7e000L, 0x3000000020L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x380000L, 0x20000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1c00000L, 0x100004L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e000000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x40000000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1f80000000L, 0x8000800L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1c000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e0000000000L, 0x104427d2L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x8L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xfc00000000000L, 0xa0200000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3f0000000000000L, 0x400001d000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x0L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0xc00080000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 125);
      case 124:
         jjmatchedKind = 152;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200008000L);
      case 125:
         return jjStopAtPos(0, 126);
      case 126:
         return jjStopAtPos(0, 136);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         break;
      case 42:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 46);
         break;
      case 43:
         if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         break;
      case 45:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 60:
         if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 61:
         if ((active2 & 0x800L) != 0L)
            return jjStopAtPos(1, 139);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         else if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(1, 141);
         else if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         else if ((active2 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 157);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 159);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x6000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x24002006000L, active1, 0x1441000c0020L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x208000080000L, active1, 0xc00207c9L, active2, 0L);
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 29);
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x3004000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1070400000008000L, active1, 0x1d000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000L, active1, 0xc00000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x10410000L, active1, 0L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0x1000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00800000L, active1, 0x8000000L, active2, 0L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00002060260400L, active1, 0x200002L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x83800c0000000800L, active1, 0x8010502010L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000200L, active1, 0x800L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0x30020800000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2110000000000L, active1, 0L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0x80000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0x4L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000001000L, active1, 0L, active2, 0L);
      case 124:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(1, 143);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(2, 167);
         break;
      case 61:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 164);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(2, 165);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000018000L, active1, 0x20020000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0x20000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0x11400004L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0x200001L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1414040000000000L, active1, 0x8000c01c012L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800010002000000L, active1, 0x3000000020L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800200c060000L, active1, 0x100100000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000480010000400L, active1, 0x2002000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x2002000300000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 29, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x61000000000000L, active1, 0x440001c17c0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400402300L, active1, 0x800L, active2, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 29);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 95, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000205041005000L, active1, 0xc00000008L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000a00000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 119:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 39, 29);
         break;
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 166);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000001c080800L, active1, 0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000004000L, active1, 0x402304L, active2, 0L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 58, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 29);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 29);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 29);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x6002001001000200L, active1, 0x4040000L, active2, 0L);
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x44000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc00000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1004000000000L, active1, 0x10210000800L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L, active2, 0L);
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 29);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000100100000400L, active1, 0x20000L, active2, 0L);
      case 109:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 29);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x100002080002L, active2, 0L);
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x60000200000000L, active1, 0x3000101001L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x20000000000L, active2, 0L);
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x2030000L, active1, 0x1c000L, active2, 0L);
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x4880400040100L, active1, 0x800290004c0L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000200000000000L, active1, 0x8L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x10L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000L);
      case 74:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x60400000000L, active1, 0x20040L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2005000000000000L, active1, 0x200000000L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 29);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 60, 29);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(4, 87);
         return jjMoveStringLiteralDfa5_0(active0, 0x80100000400L, active1, 0x4000402000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x300L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L);
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x80001000080L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x900000040000L, active1, 0xc28080010L);
      case 107:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 29);
         break;
      case 108:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8200000L, active1, 0x104000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000001000000L, active1, 0x10040800L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 29);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 29);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 84, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x201200000300L, active1, 0x9L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 29);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 104);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 106);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x2000000L);
      case 116:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 29);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 29);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0L);
      case 119:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0x2000001000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x500L, active1, 0x8000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000L);
      case 99:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 29);
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x20000002L);
      case 100:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 29);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(5, 90);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L, active1, 0x400000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 29);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 29);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20300002000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0x800L);
      case 104:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x880000000000000L, active1, 0x80010001080L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8080000L, active1, 0x310L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L, active1, 0L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400040000L, active1, 0x800090008L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100c000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x20040L);
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 29);
         break;
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 29);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 29);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 29);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x1040000000000L, active1, 0x100002040004L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x100000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000100L, active1, 0x800010000L);
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 77, 29);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(6, 88);
         break;
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 29);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 29);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 81, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000100000000L, active1, 0x2200400410L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000c00cL);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0x8000800L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 29);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(6, 107);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x300L);
      case 114:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 96, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 29);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 29);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 29);
         break;
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 29);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 105);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0x10000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0x2L);
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 29);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0x80400000000L, active1, 0x840L);
      case 103:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 76, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x18000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000010000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x88000100000000L, active1, 0x2040c008L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000004L);
      case 112:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 48, 29);
         break;
      case 116:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 29);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L);
      case 119:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x600L);
      case 120:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xc000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2400000L);
      case 100:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 43, 29);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 29);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000010L);
      case 103:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000000L, active1, 0x100020000400L);
      case 110:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 66, 29);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0x2000010000L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 55, 29);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(8, 70, 29);
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L, active1, 0x800L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000L);
      case 100:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 68, 29);
         break;
      case 101:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 86, 29);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(9, 99, 29);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 29);
         break;
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000000c800L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(9, 32, 29);
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x22000400L);
      case 119:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 101, 29);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x3001c000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200L);
      case 110:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 75, 29);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(10, 108);
         break;
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x8000000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000000L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 51, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x8000400L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x1c000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L);
      case 114:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(11, 89);
         break;
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000L);
      case 122:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active1, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0x200000000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0x20000000L);
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(12, 74, 29);
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active1, 0x8000000L);
      case 116:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x8000L);
      case 119:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(12, 73, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 74:
         return jjMoveStringLiteralDfa14_0(active1, 0x10000L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active1, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active1, 0x20000000L);
      case 110:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 91, 29);
         break;
      case 111:
         return jjMoveStringLiteralDfa14_0(active1, 0x200000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active1, 0x10000000L);
      case 110:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(14, 97, 29);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active1, 0x8000L);
      case 122:
         return jjMoveStringLiteralDfa15_0(active1, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa16_0(active1, 0x20008000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(16, 92, 29);
         return jjMoveStringLiteralDfa17_0(active1, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active1, 0x20008000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa18_0(active1, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active1, 0x20008000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(16, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa19_0(active1, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active1, 0x20010000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(17, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa20_0(active1, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active1, 0x10000L);
      case 110:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(19, 93, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa21_0(active1, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa22_0(active1, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa22_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa23_0(active1, 0x10000L);
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(22, 79, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa24_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa25_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(23, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa26_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(24, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, active1, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa27_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(25, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, active1, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa28_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(26, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, 0L, active1, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa29_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(27, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(27, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, 0L, active1, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa30_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(28, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(28, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, 0L, active1, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa31_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(29, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa31_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(29, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, 0L, active1, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(31, 80, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(30, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xfff0000000200002L, 0xffffffffffffdfffL, 0xfffff00f7fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x420043c00000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0xffffcffffffffL, 0xffffffffffff0000L, 0xf9ff3fffffffffffL, 0x401f00030003L
};
static final long[] jjbitVec6 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff003L, 0x33fffffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0xffffffffffffffffL, 0x1c000060002fffffL
};
static final long[] jjbitVec10 = {
   0x1ffffffd0000L, 0x0L, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec11 = {
   0x23ffffffffffffe0L, 0x3ff010000L, 0x3c5fdfffff99fe0L, 0xf0003b0000000L
};
static final long[] jjbitVec12 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100010000L
};
static final long[] jjbitVec13 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec15 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x2ffbfffffc7fffe0L, 0x7fL
};
static final long[] jjbitVec16 = {
   0x800dfffffffffffeL, 0x7fL, 0x200decaefef02596L, 0x3000005fL
};
static final long[] jjbitVec17 = {
   0x1L, 0x7fffffffeffL, 0xf00L, 0x0L
};
static final long[] jjbitVec18 = {
   0x6fbffffffffL, 0x3f0000L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffffffffff7fL, 0xffffffff3d7f3d7fL, 0x7f3d7fffffff3d7fL, 0xffff7fffff7f7f3dL
};
static final long[] jjbitVec21 = {
   0xffffffff7f3d7fffL, 0x7ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffffffffffffL, 0x7f9fffffffffffL, 0xffffffff07fffffeL, 0x7ffffffffffL
};
static final long[] jjbitVec23 = {
   0x0L, 0x0L, 0xfffffffffffffL, 0x8000000L
};
static final long[] jjbitVec24 = {
   0xffffffff00000000L, 0xffffffffffffffL, 0x1ffffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec26 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec27 = {
   0x8000000000000000L, 0x8000000000000001L, 0xffff00000000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x3fbbd503e2ffc84L, 0xffffffff00000000L, 0xfL, 0x0L
};
static final long[] jjbitVec29 = {
   0x73e03fe000000e0L, 0xfffffffffffffffeL, 0xfffffffe601fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec30 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0xffffff00007fffL, 0x0L
};
static final long[] jjbitVec31 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffL, 0x0L
};
static final long[] jjbitVec32 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec33 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x1fffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0x5f7ffdffa0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec37 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec38 = {
   0x18000000000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec39 = {
   0x87fffffe00000010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0x631cfcfcfcL
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x420043cffffffffL, 0xff7fffffff7fffffL
};
static final long[] jjbitVec41 = {
   0xffffffffffffffffL, 0x400000700007fffL, 0xfffffffbffffd740L, 0xffffffcff7fffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffffff07bL, 0x33fffffffff199fL
};
static final long[] jjbitVec43 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe00ffL, 0x707ffffff0016L
};
static final long[] jjbitVec44 = {
   0x7fffffe00000000L, 0xffff03ff003fffffL, 0xffffffffffffffffL, 0x1fff3dff9fefffffL
};
static final long[] jjbitVec45 = {
   0xffff1fffffff8000L, 0x7ffL, 0x1ffffffffffffL, 0x0L
};
static final long[] jjbitVec46 = {
   0xf3ffffffffffffeeL, 0xffcfff1f3fffL, 0xd3c5fdfffff99feeL, 0xfffcfb080399fL
};
static final long[] jjbitVec47 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100013bbfL
};
static final long[] jjbitVec48 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec49 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec50 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x2ffbfffffc7fffecL, 0xc0000ff5f847fL
};
static final long[] jjbitVec51 = {
   0x87fffffffffffffeL, 0x3ff7fffL, 0x3bffecaefef02596L, 0x33ff3f5fL
};
static final long[] jjbitVec52 = {
   0xc2a003ff03000001L, 0xfffe07fffffffeffL, 0x1ffffffffeff0fdfL, 0x40L
};
static final long[] jjbitVec53 = {
   0x3c7f6fbffffffffL, 0x3ff03ffL, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec54 = {
   0xffffffff7f3d7fffL, 0x3fe0007ffff7fL, 0xffffffff00000000L, 0x1fffffffffffffL
};
static final long[] jjbitVec55 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0x3ff080fffffL
};
static final long[] jjbitVec56 = {
   0xffffffff03ff7800L, 0xffffffffffffffL, 0x3ffffffffffL, 0x0L
};
static final long[] jjbitVec57 = {
   0x80007c000000f000L, 0x8000fc0000000001L, 0xffff00000000L, 0x21fff0000L
};
static final long[] jjbitVec58 = {
   0x73efffe000000e0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec59 = {
   0x5f7ffdffe0f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec60 = {
   0x18000f00000000L, 0xffd702000000e000L, 0xffffffffffffffffL, 0x9fffffffffffffffL
};
static final long[] jjbitVec61 = {
   0x87fffffe03ff0010L, 0xffffffe007fffffeL, 0x7fffffffffffffffL, 0xe0000631cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 71;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 47)
                     jjAddStates(7, 8);
                  else if (curChar == 36)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 39)
                     jjAddStates(12, 13);
                  else if (curChar == 46)
                     jjCheckNAdd(5);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 109)
                        kind = 109;
                     jjCheckNAddStates(14, 18);
                  }
                  break;
               case 48:
                  if (curChar == 47)
                  {
                     if (kind > 4)
                        kind = 4;
                     jjCheckNAddStates(19, 21);
                  }
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddStates(22, 24);
                  break;
               case 7:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 39)
                     jjAddStates(12, 13);
                  break;
               case 11:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 118)
                     kind = 118;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 12);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(16);
                  break;
               case 19:
                  if (curChar == 34)
                     jjCheckNAddStates(9, 11);
                  break;
               case 20:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 22:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 23:
                  if (curChar == 34 && kind > 119)
                     kind = 119;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff00100fffc1ffL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 9);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(38, 9);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar != 46)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddStates(32, 34);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddStates(32, 34);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(44, 9);
                  break;
               case 45:
                  if (curChar == 47)
                     jjAddStates(7, 8);
                  break;
               case 46:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 49:
                  if (curChar != 47)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(19, 21);
                  break;
               case 50:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAddStates(19, 21);
                  break;
               case 51:
                  if ((0x2400L & l) != 0L && kind > 4)
                     kind = 4;
                  break;
               case 52:
                  if (curChar == 10 && kind > 4)
                     kind = 4;
                  break;
               case 53:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar != 48)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAddStates(14, 18);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAddTwoStates(56, 3);
                  break;
               case 57:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAddTwoStates(57, 3);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 60:
                  if (curChar == 46)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(64, 9);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 67:
                  if (curChar == 46)
                     jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 113)
                     kind = 113;
                  jjCheckNAddTwoStates(70, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(29);
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 109)
                     kind = 109;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 9:
                  if ((0x5000000050L & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(42, 44);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 21:
                  if (curChar == 92)
                     jjAddStates(45, 47);
                  break;
               case 22:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 29:
                  if ((0x87fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(29);
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 47:
                  if (kind > 2)
                     kind = 2;
                  break;
               case 50:
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(19, 21);
                  break;
               case 55:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 109)
                     kind = 109;
                  jjCheckNAddTwoStates(56, 3);
                  break;
               case 58:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 62:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 65:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(37, 39);
                  break;
               case 68:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(29);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(9, 11);
                  break;
               case 29:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(29);
                  break;
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 2)
                     kind = 2;
                  break;
               case 50:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjAddStates(19, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x20L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   31, 32, 9, 35, 36, 39, 40, 48, 49, 20, 21, 23, 11, 13, 55, 57, 
   3, 58, 65, 50, 51, 53, 5, 6, 9, 20, 21, 25, 23, 31, 32, 9, 
   41, 42, 9, 59, 60, 66, 67, 68, 7, 8, 14, 15, 17, 22, 24, 26, 
   33, 34, 37, 38, 43, 44, 61, 62, 63, 64, 69, 70, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec39[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 18:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 77:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec59[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec60[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec61[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\141\163\163\145\162\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", 
"\163\165\160\145\162", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", "\164\150\162\157\167", "\164\150\162\157\167\163", 
"\164\162\141\156\163\151\145\156\164", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", "\141\163\160\145\143\164", "\141\146\164\145\162", 
"\141\162\157\165\156\144", "\142\145\146\157\162\145", "\160\157\151\156\164\143\165\164", 
"\145\170\145\143\165\164\151\157\156", "\162\145\164\165\162\156\151\156\147", 
"\160\162\151\166\151\154\145\147\145\144", "\143\141\154\154", "\160\145\162\164\141\162\147\145\164", 
"\160\145\162\164\150\151\163", "\160\145\162\143\146\154\157\167", 
"\160\145\162\143\146\154\157\167\142\145\154\157\167", "\160\145\162\164\171\160\145\167\151\164\150\151\156", 
"\151\163\163\151\156\147\154\145\164\157\156", "\164\150\162\157\167\151\156\147", "\160\162\157\143\145\145\144", 
"\164\150\151\163\112\157\151\156\120\157\151\156\164", 
"\164\150\151\163\112\157\151\156\120\157\151\156\164\123\164\141\164\151\143\120\141\162\164", 
"\164\150\151\163\105\156\143\154\157\163\151\156\147\112\157\151\156\120\157\151\156\164\123\164\141\164\151\143\120\141\162\164", "\144\145\143\154\141\162\145", "\160\141\162\145\156\164\163", 
"\167\141\162\156\151\156\147", "\145\162\162\157\162", "\163\157\146\164", 
"\160\162\145\143\145\144\145\156\143\145", "\100\164\171\160\145", "\100\155\145\164\150\157\144", 
"\100\143\157\156\163\164\162\165\143\164\157\162", "\100\146\151\145\154\144", 
"\151\156\151\164\151\141\154\151\172\141\164\151\157\156", "\160\162\145\151\156\151\164\151\141\154\151\172\141\164\151\157\156", 
"\163\164\141\164\151\143\151\156\151\164\151\141\154\151\172\141\164\151\157\156", "\147\145\164", "\163\145\164", "\150\141\156\144\154\145\162", 
"\141\144\166\151\143\145\145\170\145\143\165\164\151\157\156", "\167\151\164\150\151\156", "\167\151\164\150\151\156\143\157\144\145", 
"\143\146\154\157\167", "\143\146\154\157\167\142\145\154\157\167", "\164\141\162\147\145\164", 
"\141\162\147\163", "\100\164\150\151\163", "\100\164\141\162\147\145\164", 
"\100\141\162\147\163", "\100\167\151\164\150\151\156", 
"\100\141\156\156\157\164\141\164\151\157\156", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\100", 
"\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", 
"\136\75", "\45\75", "\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, -1, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff73L, 0xf9c23fffffffffffL, 0xffffffffffL, 
};
static final long[] jjtoMore = {
   0x8cL, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[71];
private final int[] jjstateSet = new int[142];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public JavaParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JavaParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 71; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 2 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
